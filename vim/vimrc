"{{{Global config options

set nocompatible

let mapleader="\<Space>"
let maplocalleader="\<Space>"

filetype plugin indent on
syntax on

"}}}
"{{{Plugins

call plug#begin('~/.vim/plugins')

" Make sure you use single quotes
Plug 'chriskempson/base16-vim'
Plug 'dockyard/vim-easydir'
Plug 'editorconfig/editorconfig-vim'
Plug 'jiangmiao/auto-pairs'
Plug 'mileszs/ack.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-scripts/netrw.vim'

call plug#end()

" Airline
let g:airline_powerline_fonts=1

" Vim Markdown
let g:markdown_fenced_languages = ['html', 'javascript', 'bash=sh', 'java', 'json']

" Ack
if executable('ag')
  let g:ackprg = 'ag --vimgrep --smart-case'
endif

cnoreabbrev Ack Ack!

"}}}
"{{{Editor

" Theme
set t_Co=256
set background=dark
colorscheme base16-default-dark

" Indentation

" Auto reload files when changed from outside Vim
set autoread

" Fix backspace behaviour in insert mode
set backspace=indent,eol,start

" Use system clipboard
set clipboard+=unnamed

" Highlight current line
set cursorline

" Highlight current column
set cursorcolumn

" Set default encoding
set encoding=UTF-8

" Folding settings
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use

" Global substitution by default
set gdefault

" Allows having not-saved buffers
set hidden

" Redraw setting, improves performance
set lazyredraw

" Set de number of actions to be saved on the history
set history=50

" Don't highlight search results by default
" (I use a key mapping for that)
set nohlsearch

" Highlights the search result as you type
set incsearch

" Ignore the case in search patterns, unless expression
" contains uppercase characters
set ignorecase
set smartcase

" Add - and _ as keyword. Ex: "what-the-fuck" and "what_the_fuck" are 5 words
set iskeyword-=-
set iskeyword-=_

" Always show statusline, even with only one window
set laststatus=2

" Show invisible characters and use some custom chars for them
set list
set listchars=tab:▸\ ,eol:¬

" Don't backup files
set nobackup

" Don't bell on errors
set noerrorbells

" We don't want a swap file
set noswapfile

" Don't wrap lines, but if wrapped, show a custom char at the end
set nowrap
set showbreak=↪

" Relative line numbering, and real line number for current line
set relativenumber
set number

" Show line number, column and the relative position of the show text
set ruler

" Keep 5 lines above and behind the cursor
set scrolloff=5

" Show commands (and visual selection info) on status line
set showcmd

" Autoindent on new lines
set smartindent

"}}}
"{{{Undo

if exists('+undofile')
  if !isdirectory(expand('~/.vim/undo'))
    silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
  endif

  set undodir=~/.vim/undo/
  set undofile
  set undolevels=1000
  set undoreload=10000
endif

"}}}
"{{{Indentation

" Prefer spaces vs tabs. Although with EditorConfig this
" can be overwritten on a per-project basis
set autoindent
set smartindent
set tabstop=2
set shiftwidth=2
set expandtab

"}}}
"{{{Highlight whitespace

highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
match ExtraWhitespace /\s\+$/

augroup ExtraWhitespaceCommand
  autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
  autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
  autocmd InsertLeave * match ExtraWhitespace /\s\+$/
augroup END

"}}}
"{{{Mappings

" Normal mode
" -----------
" Keep search results at the center of the screen
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz

" Search Highlight
nnoremap <leader>H :set hls! <cr>

" Clean whitespace
nnoremap <leader>w :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" Working with buffers
nnoremap <leader><Left> :bp<CR>
nnoremap <leader><Right> :bn<CR>
nnoremap <leader>h :bp<CR>
nnoremap <leader>l :bn<CR>
nnoremap <leader><Down> :call CloseAllBuffersButCurrent()<CR>

" Mapping for Ack
nnoremap <Leader>a :Ack!<Space>

" Insert mode
" -----------
" Insert mode: write lang<C-s> to get a shebang for given lang
inoremap <C-s> <Esc>:sil exe ".!which <cWORD>" <bar> s/^/#!/ <bar> filetype detect<cr>YpDi

" Visual model
" ------------
" Reselect after indent
vnoremap < <gv
vnoremap > >gv

"}}}
"{{{Filetype specific stuff

" Vim
" ---
"  Search Vim help for word under cursor
au FileType vim nnoremap K :help <C-r><C-w><CR>

" Git
" ---
au FileType gitcommit set textwidth=72
au FileType gitcommit set colorcolumn=73

" Markdown
" --------
au FileType markdown setlocal wrap

" Fix up and down movements on wrapped text (visual and normal mode)
au FileType markdown nnoremap <expr> j v:count ? 'j' : 'gj'
au FileType markdown nnoremap <expr> k v:count ? 'k' : 'gk'
au FileType markdown vnoremap <expr> j v:count ? 'j' : 'gj'
au FileType markdown vnoremap <expr> k v:count ? 'k' : 'gk'

"}}}
"{{{Functions

function! CloseAllBuffersButCurrent()
  silent! execute "w | %bd | e#"
  silent! execute "call DeleteEmptyBuffers()"
endfunction

function! DeleteEmptyBuffers()
  let [i, n; empty] = [1, bufnr('$')]
  while i <= n
    if bufexists(i) && bufname(i) == ''
      call add(empty, i)
    endif
    let i += 1
  endwhile
  if len(empty) > 0
    exe 'bdelete' join(empty)
  endif
endfunction

"}}}

" vim:foldmethod=marker:foldlevel=0:fen
